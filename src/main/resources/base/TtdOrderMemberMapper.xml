<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="io.vitess.dao.sqlmap.TtdOrderMemberDao">
	<resultMap id="TtdOrderMemberResult" type="io.vitess.model.sqlmap.TtdOrderMember">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ttdOrderMemberColumns">
	    <![CDATA[
	        	SALES_ORDER_ID as id,
	        	PLATFORM_MEMBER_CODE as platformMemberCode,
	        	REAL_NAME as realName,
	        	EMAIL as email,
	        	MOBILE as mobile,
	        	PHONE as phone,
	        	COUNTRY as country,
	        	PROVINCE as province,
	        	CITY as city,
	        	DISTRICT as district,
	        	ADDRESS as address,
	        	SHOP_ID as shopId
	    ]]>
	</sql>

		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="io.vitess.model.sqlmap.TtdOrderMember"
				
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        t_td_order_member (
		        id,
		        	PLATFORM_MEMBER_CODE ,
		        	REAL_NAME ,
		        	EMAIL ,
		        	MOBILE ,
		        	PHONE ,
		        	COUNTRY ,
		        	PROVINCE ,
		        	CITY ,
		        	DISTRICT ,
		        	ADDRESS ,
		        	SHOP_ID 
		        ) VALUES (
		        #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{platformMemberCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{realName,javaType=String,jdbcType=VARCHAR} ,
		        	#{email,javaType=String,jdbcType=VARCHAR} ,
		        	#{mobile,javaType=String,jdbcType=VARCHAR} ,
		        	#{phone,javaType=String,jdbcType=VARCHAR} ,
		        	#{country,javaType=String,jdbcType=VARCHAR} ,
		        	#{province,javaType=String,jdbcType=VARCHAR} ,
		        	#{city,javaType=String,jdbcType=VARCHAR} ,
		        	#{district,javaType=String,jdbcType=VARCHAR} ,
		        	#{address,javaType=String,jdbcType=VARCHAR} ,
		        	#{shopId,javaType=Long,jdbcType=BIGINT} 
		        )
		    ]]>

		</insert>
		

		<update id="update" parameterType="io.vitess.model.sqlmap.TtdOrderMember">
	    <![CDATA[
	        UPDATE t_td_order_member SET
		        PLATFORM_MEMBER_CODE = #{platformMemberCode,javaType=String,jdbcType=VARCHAR} ,
		        REAL_NAME = #{realName,javaType=String,jdbcType=VARCHAR} ,
		        EMAIL = #{email,javaType=String,jdbcType=VARCHAR} ,
		        MOBILE = #{mobile,javaType=String,jdbcType=VARCHAR} ,
		        PHONE = #{phone,javaType=String,jdbcType=VARCHAR} ,
		        COUNTRY = #{country,javaType=String,jdbcType=VARCHAR} ,
		        PROVINCE = #{province,javaType=String,jdbcType=VARCHAR} ,
		        CITY = #{city,javaType=String,jdbcType=VARCHAR} ,
		        DISTRICT = #{district,javaType=String,jdbcType=VARCHAR} ,
		        ADDRESS = #{address,javaType=String,jdbcType=VARCHAR} ,
		        SHOP_ID = #{shopId,javaType=Long,jdbcType=BIGINT} 
	        WHERE 
		        SALES_ORDER_ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from t_td_order_member where
		        SALES_ORDER_ID = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from t_td_order_member 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="TtdOrderMemberResult" flushCache="false">
			select <include refid="ttdOrderMemberColumns" />
		    <![CDATA[
			    from t_td_order_member 
		        where 
		        SALES_ORDER_ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="TtdOrderMemberResult" flushCache="false">
			select <include refid="ttdOrderMemberColumns" />
			    from t_td_order_member 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="ttdOrderMemberDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and SALES_ORDER_ID = #{id}
				</if>
	       
				<if test="platformMemberCode!=null">
					and PLATFORM_MEMBER_CODE = #{platformMemberCode}
				</if>
	       
				<if test="realName!=null">
					and REAL_NAME = #{realName}
				</if>
	       
				<if test="email!=null">
					and EMAIL = #{email}
				</if>
	       
				<if test="mobile!=null">
					and MOBILE = #{mobile}
				</if>
	       
				<if test="phone!=null">
					and PHONE = #{phone}
				</if>
	       
				<if test="country!=null">
					and COUNTRY = #{country}
				</if>
	       
				<if test="province!=null">
					and PROVINCE = #{province}
				</if>
	       
				<if test="city!=null">
					and CITY = #{city}
				</if>
	       
				<if test="district!=null">
					and DISTRICT = #{district}
				</if>
	       
				<if test="address!=null">
					and ADDRESS = #{address}
				</if>
	       
				<if test="shopId!=null">
					and SHOP_ID = #{shopId}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from t_td_order_member 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_td_order_member 
		<include refid="ttdOrderMemberDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from t_td_order_member 
		<include refid="ttdOrderMemberDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="TtdOrderMemberResult">
    	select <include refid="ttdOrderMemberColumns" />
	    from t_td_order_member 
		<include refid="ttdOrderMemberDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="TtdOrderMemberResult">
    	select <include refid="ttdOrderMemberColumns" />
	    from t_td_order_member 
		<include refid="ttdOrderMemberDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="TtdOrderMemberResult">
    	select <include refid="ttdOrderMemberColumns" />
	    from t_td_order_member 
		<include refid="ttdOrderMemberDynamicWhere"/>
		
    </select>

	
</mapper>
