<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="io.vitess.dao.sqlmap.TtdSoInvFlowDao">
	<resultMap id="TtdSoInvFlowResult" type="io.vitess.model.sqlmap.TtdSoInvFlow">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ttdSoInvFlowColumns">
	    <![CDATA[
	        	ID as id,
	        	SO_ID as soId,
	        	SKU_CODE as skuCode,
	        	QTY as qty,
	        	BTACH_CODE as btachCode,
	        	BARCH_NO as barchNo,
	        	INV_STATUS as invStatus,
	        	WH_CODE as whCode,
	        	INV_OWNER as invOwner,
	        	TRANSACTION_TIME as transactionTime,
	        	INPUT_TIME as inputTime,
	        	DATA_TYPE as dataType,
	        	SHOP_ID as shopId,
	        	MARKET_ABILITY as marketAbility
	    ]]>
	</sql>

		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="io.vitess.model.sqlmap.TtdSoInvFlow"
				
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        t_td_so_inv_flow (
		        id,
		        	SO_ID ,
		        	SKU_CODE ,
		        	QTY ,
		        	BTACH_CODE ,
		        	BARCH_NO ,
		        	INV_STATUS ,
		        	WH_CODE ,
		        	INV_OWNER ,
		        	TRANSACTION_TIME ,
		        	INPUT_TIME ,
		        	DATA_TYPE ,
		        	SHOP_ID ,
		        	MARKET_ABILITY 
		        ) VALUES (
		        #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{soId,javaType=Long,jdbcType=BIGINT} ,
		        	#{skuCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{qty,javaType=Integer,jdbcType=INTEGER} ,
		        	#{btachCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{barchNo,javaType=String,jdbcType=VARCHAR} ,
		        	#{invStatus,javaType=String,jdbcType=VARCHAR} ,
		        	#{whCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{invOwner,javaType=String,jdbcType=VARCHAR} ,
		        	#{transactionTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{inputTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{dataType,javaType=Integer,jdbcType=TINYINT} ,
		        	#{shopId,javaType=Long,jdbcType=BIGINT} ,
		        	#{marketAbility,javaType=Boolean,jdbcType=BIT} 
		        )
		    ]]>

		</insert>
		

		<update id="update" parameterType="io.vitess.model.sqlmap.TtdSoInvFlow">
	    <![CDATA[
	        UPDATE t_td_so_inv_flow SET
		        SO_ID = #{soId,javaType=Long,jdbcType=BIGINT} ,
		        SKU_CODE = #{skuCode,javaType=String,jdbcType=VARCHAR} ,
		        QTY = #{qty,javaType=Integer,jdbcType=INTEGER} ,
		        BTACH_CODE = #{btachCode,javaType=String,jdbcType=VARCHAR} ,
		        BARCH_NO = #{barchNo,javaType=String,jdbcType=VARCHAR} ,
		        INV_STATUS = #{invStatus,javaType=String,jdbcType=VARCHAR} ,
		        WH_CODE = #{whCode,javaType=String,jdbcType=VARCHAR} ,
		        INV_OWNER = #{invOwner,javaType=String,jdbcType=VARCHAR} ,
		        TRANSACTION_TIME = #{transactionTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        INPUT_TIME = #{inputTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        DATA_TYPE = #{dataType,javaType=Integer,jdbcType=TINYINT} ,
		        SHOP_ID = #{shopId,javaType=Long,jdbcType=BIGINT} ,
		        MARKET_ABILITY = #{marketAbility,javaType=Boolean,jdbcType=BIT} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from t_td_so_inv_flow where
		        ID = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from t_td_so_inv_flow 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="TtdSoInvFlowResult" flushCache="false">
			select <include refid="ttdSoInvFlowColumns" />
		    <![CDATA[
			    from t_td_so_inv_flow 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="TtdSoInvFlowResult" flushCache="false">
			select <include refid="ttdSoInvFlowColumns" />
			    from t_td_so_inv_flow 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="ttdSoInvFlowDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and ID = #{id}
				</if>
	       
				<if test="soId!=null">
					and SO_ID = #{soId}
				</if>
	       
				<if test="skuCode!=null">
					and SKU_CODE = #{skuCode}
				</if>
	       
				<if test="qty!=null">
					and QTY = #{qty}
				</if>
	       
				<if test="btachCode!=null">
					and BTACH_CODE = #{btachCode}
				</if>
	       
				<if test="barchNo!=null">
					and BARCH_NO = #{barchNo}
				</if>
	       
				<if test="invStatus!=null">
					and INV_STATUS = #{invStatus}
				</if>
	       
				<if test="whCode!=null">
					and WH_CODE = #{whCode}
				</if>
	       
				<if test="invOwner!=null">
					and INV_OWNER = #{invOwner}
				</if>
	       
				<if test="transactionTime!=null">
					and TRANSACTION_TIME = #{transactionTime}
				</if>
	       
				<if test="inputTime!=null">
					and INPUT_TIME = #{inputTime}
				</if>
	       
				<if test="dataType!=null">
					and DATA_TYPE = #{dataType}
				</if>
	       
				<if test="shopId!=null">
					and SHOP_ID = #{shopId}
				</if>
	       
				<if test="marketAbility!=null">
					and MARKET_ABILITY = #{marketAbility}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from t_td_so_inv_flow 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_td_so_inv_flow 
		<include refid="ttdSoInvFlowDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from t_td_so_inv_flow 
		<include refid="ttdSoInvFlowDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="TtdSoInvFlowResult">
    	select <include refid="ttdSoInvFlowColumns" />
	    from t_td_so_inv_flow 
		<include refid="ttdSoInvFlowDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="TtdSoInvFlowResult">
    	select <include refid="ttdSoInvFlowColumns" />
	    from t_td_so_inv_flow 
		<include refid="ttdSoInvFlowDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="TtdSoInvFlowResult">
    	select <include refid="ttdSoInvFlowColumns" />
	    from t_td_so_inv_flow 
		<include refid="ttdSoInvFlowDynamicWhere"/>
		
    </select>

	
</mapper>
