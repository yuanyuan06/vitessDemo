<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="io.vitess.dao.sqlmap.TtdSoServiceLineDao">
	<resultMap id="TtdSoServiceLineResult" type="io.vitess.model.sqlmap.TtdSoServiceLine">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ttdSoServiceLineColumns">
	    <![CDATA[
	        	ID as id,
	        	SALES_ORDER_ID as salesOrderId,
	        	PLATFORM_LINE_ID as platformLineId,
	        	SERVICE_ID as serviceId,
	        	QTY as qty,
	        	UNIT_PRICE as unitPrice,
	        	TOTAL_ACTUAL as totalActual,
	        	PAYMENT as payment,
	        	TITLE as title,
	        	TMSER_SPU_CODE as tmserSpuCode,
	        	SERVICE_TYPE as serviceType,
	        	SERVICE_TYPE_DESC as serviceTypeDesc,
	        	PROVIDER_CODE as providerCode,
	        	PROVIDER_NAME as providerName,
	        	SHOP_ID as shopId
	    ]]>
	</sql>

		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="io.vitess.model.sqlmap.TtdSoServiceLine"
				
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        t_td_so_service_line (
		        id,
		        	SALES_ORDER_ID ,
		        	PLATFORM_LINE_ID ,
		        	SERVICE_ID ,
		        	QTY ,
		        	UNIT_PRICE ,
		        	TOTAL_ACTUAL ,
		        	PAYMENT ,
		        	TITLE ,
		        	TMSER_SPU_CODE ,
		        	SERVICE_TYPE ,
		        	SERVICE_TYPE_DESC ,
		        	PROVIDER_CODE ,
		        	PROVIDER_NAME ,
		        	SHOP_ID 
		        ) VALUES (
		        #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{salesOrderId,javaType=Long,jdbcType=BIGINT} ,
		        	#{platformLineId,javaType=String,jdbcType=VARCHAR} ,
		        	#{serviceId,javaType=String,jdbcType=VARCHAR} ,
		        	#{qty,javaType=Integer,jdbcType=INTEGER} ,
		        	#{unitPrice,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        	#{totalActual,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        	#{payment,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        	#{title,javaType=String,jdbcType=VARCHAR} ,
		        	#{tmserSpuCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{serviceType,javaType=Integer,jdbcType=TINYINT} ,
		        	#{serviceTypeDesc,javaType=String,jdbcType=VARCHAR} ,
		        	#{providerCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{providerName,javaType=String,jdbcType=VARCHAR} ,
		        	#{shopId,javaType=Long,jdbcType=BIGINT} 
		        )
		    ]]>

		</insert>
		

		<update id="update" parameterType="io.vitess.model.sqlmap.TtdSoServiceLine">
	    <![CDATA[
	        UPDATE t_td_so_service_line SET
		        SALES_ORDER_ID = #{salesOrderId,javaType=Long,jdbcType=BIGINT} ,
		        PLATFORM_LINE_ID = #{platformLineId,javaType=String,jdbcType=VARCHAR} ,
		        SERVICE_ID = #{serviceId,javaType=String,jdbcType=VARCHAR} ,
		        QTY = #{qty,javaType=Integer,jdbcType=INTEGER} ,
		        UNIT_PRICE = #{unitPrice,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        TOTAL_ACTUAL = #{totalActual,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        PAYMENT = #{payment,javaType=java.math.BigDecimal,jdbcType=DECIMAL} ,
		        TITLE = #{title,javaType=String,jdbcType=VARCHAR} ,
		        TMSER_SPU_CODE = #{tmserSpuCode,javaType=String,jdbcType=VARCHAR} ,
		        SERVICE_TYPE = #{serviceType,javaType=Integer,jdbcType=TINYINT} ,
		        SERVICE_TYPE_DESC = #{serviceTypeDesc,javaType=String,jdbcType=VARCHAR} ,
		        PROVIDER_CODE = #{providerCode,javaType=String,jdbcType=VARCHAR} ,
		        PROVIDER_NAME = #{providerName,javaType=String,jdbcType=VARCHAR} ,
		        SHOP_ID = #{shopId,javaType=Long,jdbcType=BIGINT} 
	        WHERE 
		        ID = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from t_td_so_service_line where
		        ID = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from t_td_so_service_line 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="TtdSoServiceLineResult" flushCache="false">
			select <include refid="ttdSoServiceLineColumns" />
		    <![CDATA[
			    from t_td_so_service_line 
		        where 
		        ID = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="TtdSoServiceLineResult" flushCache="false">
			select <include refid="ttdSoServiceLineColumns" />
			    from t_td_so_service_line 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="ttdSoServiceLineDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and ID = #{id}
				</if>
	       
				<if test="salesOrderId!=null">
					and SALES_ORDER_ID = #{salesOrderId}
				</if>
	       
				<if test="platformLineId!=null">
					and PLATFORM_LINE_ID = #{platformLineId}
				</if>
	       
				<if test="serviceId!=null">
					and SERVICE_ID = #{serviceId}
				</if>
	       
				<if test="qty!=null">
					and QTY = #{qty}
				</if>
	       
				<if test="unitPrice!=null">
					and UNIT_PRICE = #{unitPrice}
				</if>
	       
				<if test="totalActual!=null">
					and TOTAL_ACTUAL = #{totalActual}
				</if>
	       
				<if test="payment!=null">
					and PAYMENT = #{payment}
				</if>
	       
				<if test="title!=null">
					and TITLE = #{title}
				</if>
	       
				<if test="tmserSpuCode!=null">
					and TMSER_SPU_CODE = #{tmserSpuCode}
				</if>
	       
				<if test="serviceType!=null">
					and SERVICE_TYPE = #{serviceType}
				</if>
	       
				<if test="serviceTypeDesc!=null">
					and SERVICE_TYPE_DESC = #{serviceTypeDesc}
				</if>
	       
				<if test="providerCode!=null">
					and PROVIDER_CODE = #{providerCode}
				</if>
	       
				<if test="providerName!=null">
					and PROVIDER_NAME = #{providerName}
				</if>
	       
				<if test="shopId!=null">
					and SHOP_ID = #{shopId}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from t_td_so_service_line 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_td_so_service_line 
		<include refid="ttdSoServiceLineDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from t_td_so_service_line 
		<include refid="ttdSoServiceLineDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="TtdSoServiceLineResult">
    	select <include refid="ttdSoServiceLineColumns" />
	    from t_td_so_service_line 
		<include refid="ttdSoServiceLineDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="TtdSoServiceLineResult">
    	select <include refid="ttdSoServiceLineColumns" />
	    from t_td_so_service_line 
		<include refid="ttdSoServiceLineDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="TtdSoServiceLineResult">
    	select <include refid="ttdSoServiceLineColumns" />
	    from t_td_so_service_line 
		<include refid="ttdSoServiceLineDynamicWhere"/>
		
    </select>

	
</mapper>
